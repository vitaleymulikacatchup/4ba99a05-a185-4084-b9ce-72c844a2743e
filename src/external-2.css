/* ============================================ */
/* External CSS from https://www.orchids.app/_next/static/css/540f9246d6b87630.css?dpl=dpl_9gvuMuAhYsVmDoK6nA73GxRWgYd2 */
/* Processed and formatted by AI */
/* Size: 28612 bytes */
/* ============================================ */

*,
::backdrop,
:after,
:before {
  box-sizing: border-box;
  border: 0 solid;
  margin: 0;
  padding: 0;
}

:host,
html {
  -webkit-text-size-adjust: 100%;
  tab-size: 4;
  line-height: 1.5;
  font-family: var(--default-font-family, ui-sans-serif, system-ui, sans-serif, "Apple Color Emoji", "Segoe UI Emoji", "Segoe UI Symbol", "Noto Color Emoji");
  font-feature-settings: var(--default-font-feature-settings, normal);
  font-variation-settings: var(--default-font-variation-settings, normal);
  -webkit-tap-highlight-color: transparent;
}

hr {
  height: 0;
  color: inherit;
  border-top-width: 1px;
}

abbr:where([title]) {
  -webkit-text-decoration: underline dotted;
  text-decoration: underline dotted;
}

h1,
h2,
h3,
h4,
h5,
h6 {
  font-size: inherit;
  font-weight: inherit;
}

a {
  color: inherit;
  -webkit-text-decoration: inherit;
  text-decoration: inherit;
}

b,
strong {
  font-weight: bolder;
}

code,
kbd,
pre,
samp {
  font-family: var(--default-mono-font-family, ui-monospace, SFMono-Regular, Menlo, Monaco, Consolas, "Liberation Mono", "Courier New", monospace);
  font-feature-settings: var(--default-mono-font-feature-settings, normal);
  font-variation-settings: var(--default-mono-font-variation-settings, normal);
  font-size: 1em;
}

small {
  font-size: 80%;
}

sub,
sup {
  vertical-align: baseline;
  font-size: 75%;
  line-height: 0;
  position: relative;
}

sub {
  bottom: -.25em;
}

sup {
  top: -.5em;
}

table {
  text-indent: 0;
  border-color: inherit;
  border-collapse: collapse;
}

:-moz-focusring {
  outline: auto;
}

progress {
  vertical-align: baseline;
}

summary {
  display: list-item;
}

menu,
ol,
ul {
  list-style: none;
}

audio,
canvas,
embed,
iframe,
img,
object,
svg,
video {
  vertical-align: middle;
  display: block;
}

img,
video {
  max-width: 100%;
  height: auto;
}

button,
input,
optgroup,
select,
textarea {
  font: inherit;
  font-feature-settings: inherit;
  font-variation-settings: inherit;
  letter-spacing: inherit;
  color: inherit;
  opacity: 1;
  background-color: #0000;
  border-radius: 0;
}

::file-selector-button {
  font: inherit;
  font-feature-settings: inherit;
  font-variation-settings: inherit;
  letter-spacing: inherit;
  color: inherit;
  opacity: 1;
  background-color: #0000;
  border-radius: 0;
}

:where(select:is([multiple],[size])) optgroup {
  font-weight: bolder;
}

:where(select:is([multiple],[size])) optgroup option {
  padding-inline-start: 20px;
}

::file-selector-button {
  margin-inline-end: 4px;
}

::placeholder {
  opacity: 1;
}

textarea {
  resize: vertical;
}

::-webkit-search-decoration {
  -webkit-appearance: none;
}

::-webkit-date-and-time-value {
  min-height: 1lh;
  text-align: inherit;
}

::-webkit-datetime-edit {
  display: inline-flex;
}

::-webkit-datetime-edit-fields-wrapper {
  padding: 0;
}

::-webkit-datetime-edit,
::-webkit-datetime-edit-year-field {
  padding-block: 0;
}

::-webkit-datetime-edit-day-field,
::-webkit-datetime-edit-month-field {
  padding-block: 0;
}

::-webkit-datetime-edit-hour-field,
::-webkit-datetime-edit-minute-field {
  padding-block: 0;
}

::-webkit-datetime-edit-millisecond-field,
::-webkit-datetime-edit-second-field {
  padding-block: 0;
}

::-webkit-datetime-edit-meridiem-field {
  padding-block: 0;
}

:-moz-ui-invalid {
  box-shadow: none;
}

button,
input:where([type=button], [type=reset], [type=submit]) {
  appearance: button;
}

::file-selector-button {
  appearance: button;
}

::-webkit-inner-spin-button,
::-webkit-outer-spin-button {
  height: auto;
}

[hidden]:where(:not([hidden=until-found])) {
  display: none !important;
}

* {
  border-color: var(--border);
  outline-color: var(--ring);
}

@supports (color: color-mix(in lab, red, red)) {
  * {
    outline-color: color-mix(in oklab, var(--ring) 50%, transparent);
  }
}

body {
  background-color: var(--background);
  color: var(--foreground);
}

.pointer-events-auto {
  pointer-events: auto;
}

.pointer-events-none {
  pointer-events: none;
}

.collapse {
  visibility: collapse;
}

.invisible {
  visibility: hidden;
}

.visible {
  visibility: visible;
}

.sr-only {
  clip: rect(0, 0, 0, 0);
  white-space: nowrap;
  border-width: 0;
  width: 1px;
  height: 1px;
  margin: -1px;
  padding: 0;
  overflow: hidden;
}

.absolute,
.sr-only {
  position: absolute;
}

.fixed {
  position: fixed;
}

.relative {
  position: relative;
}

.static {
  position: static;
}

.sticky {
  position: sticky;
}

.-inset-2 {
  inset: calc(var(--spacing) * -2);
}

.inset-0 {
  inset: calc(var(--spacing) * 0);
}

.inset-x-0 {
  inset-inline: calc(var(--spacing) * 0);
}

.inset-y-1\.5 {
  inset-block: calc(var(--spacing) * 1.5);
}

.-top-0\.5 {
  top: calc(var(--spacing) * -.5);
}

.-top-1 {
  top: calc(var(--spacing) * -1);
}

.-top-2 {
  top: calc(var(--spacing) * -2);
}

.top-0 {
  top: calc(var(--spacing) * 0);
}

.top-1 {
  top: calc(var(--spacing) * 1);
}

.top-1\.5 {
  top: calc(var(--spacing) * 1.5);
}

.top-1\/2 {
  top: 50%;
}

.top-2 {
  top: calc(var(--spacing) * 2);
}

.top-4 {
  top: calc(var(--spacing) * 4);
}

.top-6 {
  top: calc(var(--spacing) * 6);
}

.top-8 {
  top: calc(var(--spacing) * 8);
}

.top-\[50\%\] {
  top: 50%;
}

.top-\[59px\] {
  top: 59px;
}

.top-\[119px\] {
  top: 119px;
}

.top-\[179px\] {
  top: 179px;
}

.top-\[239px\] {
  top: 239px;
}

.top-\[299px\] {
  top: 299px;
}

.top-\[359px\] {
  top: 359px;
}

.top-full {
  top: 100%;
}

.-right-0\.5 {
  right: calc(var(--spacing) * -.5);
}

.-right-1 {
  right: calc(var(--spacing) * -1);
}

.-right-1\.5 {
  right: calc(var(--spacing) * -1.5);
}

.-right-5 {
  right: calc(var(--spacing) * -5);
}

.right-0 {
  right: calc(var(--spacing) * 0);
}

.right-1\.5 {
  right: calc(var(--spacing) * 1.5);
}

.right-2 {
  right: calc(var(--spacing) * 2);
}

.right-4 {
  right: calc(var(--spacing) * 4);
}

.right-40 {
  right: calc(var(--spacing) * 40);
}

.-bottom-2 {
  bottom: calc(var(--spacing) * -2);
}

.bottom-0 {
  bottom: calc(var(--spacing) * 0);
}

.bottom-1 {
  bottom: calc(var(--spacing) * 1);
}

.bottom-1\.5 {
  bottom: calc(var(--spacing) * 1.5);
}

.bottom-2 {
  bottom: calc(var(--spacing) * 2);
}

.bottom-6 {
  bottom: calc(var(--spacing) * 6);
}

.bottom-8 {
  bottom: calc(var(--spacing) * 8);
}

.left-0 {
  left: calc(var(--spacing) * 0);
}

.left-1\.5 {
  left: calc(var(--spacing) * 1.5);
}

.left-1\/2 {
  left: 50%;
}

.left-2 {
  left: calc(var(--spacing) * 2);
}

.left-3 {
  left: calc(var(--spacing) * 3);
}

.left-8 {
  left: calc(var(--spacing) * 8);
}

.left-\[-290px\] {
  left: -290px;
}

.left-\[50\%\] {
  left: 50%;
}

.left-\[239px\] {
  left: 239px;
}

.left-\[299px\] {
  left: 299px;
}

.left-\[359px\] {
  left: 359px;
}

.left-\[479px\] {
  left: 479px;
}

.left-\[539px\] {
  left: 539px;
}

.left-\[599px\] {
  left: 599px;
}

.left-\[659px\] {
  left: 659px;
}

.left-\[719px\] {
  left: 719px;
}

.left-\[779px\] {
  left: 779px;
}

.isolate {
  isolation: isolate;
}

.-z-10 {
  z-index: calc(10 * -1);
}

.z-0 {
  z-index: 0;
}

.z-10 {
  z-index: 10;
}

.z-20 {
  z-index: 20;
}

.z-30 {
  z-index: 30;
}

.z-40 {
  z-index: 40;
}

.z-50 {
  z-index: 50;
}

.z-\[1\] {
  z-index: 1;
}

.z-\[60\] {
  z-index: 60;
}

.z-\[100\] {
  z-index: 100;
}

.z-\[200\] {
  z-index: 200;
}

.col-span-2 {
  grid-column: span 2 / span 2;
}

.col-span-3 {
  grid-column: span 3 / span 3;
}

.col-span-full {
  grid-column: 1 / -1;
}

.container {
  width: 100%;
}

.m-0 {
  margin: calc(var(--spacing) * 0);
}

.-mx-1 {
  margin-inline: calc(var(--spacing) * -1);
}

.-mx-2 {
  margin-inline: calc(var(--spacing) * -2);
}

.-mx-4 {
  margin-inline: calc(var(--spacing) * -4);
}

.mx-0 {
  margin-inline: calc(var(--spacing) * 0);
}

.mx-0\.5 {
  margin-inline: calc(var(--spacing) * .5);
}

.mx-1 {
  margin-inline: calc(var(--spacing) * 1);
}

.mx-2 {
  margin-inline: calc(var(--spacing) * 2);
}

.mx-auto {
  margin-inline: auto;
}

.my-0\.5 {
  margin-block: calc(var(--spacing) * .5);
}

.my-1 {
  margin-block: calc(var(--spacing) * 1);
}

.my-4 {
  margin-block: calc(var(--spacing) * 4);
}

.my-12 {
  margin-block: calc(var(--spacing) * 12);
}

.my-auto {
  margin-block: auto;
}

.ms-2 {
  margin-inline-start: calc(var(--spacing) * 2);
}

.prose {
  color: var(--tw-prose-body);
  max-width: 65ch;
}

.prose :where(p):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where([class~=lead]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-lead);
  margin-top: 1.2em;
  margin-bottom: 1.2em;
  font-size: 1.25em;
  line-height: 1.6;
}

.prose :where(a):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-links);
  font-weight: 500;
  text-decoration: underline;
}

.prose :where(strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-bold);
  font-weight: 600;
}

.prose :where(a strong):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(blockquote strong):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(thead th strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
}

.prose :where(ol):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-inline-start: 1.625em;
  list-style-type: decimal;
}

.prose :where(ol[type=A]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type=a]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type=A s]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: upper-alpha;
}

.prose :where(ol[type=a s]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: lower-alpha;
}

.prose :where(ol[type=I]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type=i]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type=I s]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: upper-roman;
}

.prose :where(ol[type=i s]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: lower-roman;
}

.prose :where(ol[type="1"]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  list-style-type: decimal;
}

.prose :where(ul):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
  padding-inline-start: 1.625em;
  list-style-type: disc;
}

.prose :where(ol>li):not(:where([class~=not-prose],[class~=not-prose] *))::marker {
  color: var(--tw-prose-counters);
  font-weight: 400;
}

.prose :where(ul>li):not(:where([class~=not-prose],[class~=not-prose] *))::marker {
  color: var(--tw-prose-bullets);
}

.prose :where(dt):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  margin-top: 1.25em;
  font-weight: 600;
}

.prose :where(hr):not(:where([class~=not-prose],[class~=not-prose] *)) {
  border-color: var(--tw-prose-hr);
  border-top-width: 1px;
  margin-top: 3em;
  margin-bottom: 3em;
}

.prose :where(blockquote):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-quotes);
  border-inline-start-width: .25rem;
  border-inline-start-color: var(--tw-prose-quote-borders);
  quotes: "“" "”" "‘" "’";
  margin-top: 1.6em;
  margin-bottom: 1.6em;
  padding-inline-start: 1em;
  font-style: italic;
  font-weight: 500;
}

.prose :where(blockquote p:first-of-type):not(:where([class~=not-prose],[class~=not-prose] *)):before {
  content: open-quote;
}

.prose :where(blockquote p:last-of-type):not(:where([class~=not-prose],[class~=not-prose] *)):after {
  content: close-quote;
}

.prose :where(h1):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  margin-top: 0;
  margin-bottom: .888889em;
  font-size: 2.25em;
  font-weight: 800;
  line-height: 1.11111;
}

.prose :where(h1 strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-weight: 900;
}

.prose :where(h2):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  margin-top: 2em;
  margin-bottom: 1em;
  font-size: 1.5em;
  font-weight: 700;
  line-height: 1.33333;
}

.prose :where(h2 strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-weight: 800;
}

.prose :where(h3):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  margin-top: 1.6em;
  margin-bottom: .6em;
  font-size: 1.25em;
  font-weight: 600;
}

.prose :where(h3 strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-weight: 700;
}

.prose :where(h4):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  margin-top: 1.5em;
  margin-bottom: .5em;
  font-weight: 600;
  line-height: 1.5;
}

.prose :where(h4 strong):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-weight: 700;
}

.prose :where(img):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(picture):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
  display: block;
}

.prose :where(video):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(kbd):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-kbd);
  box-shadow: 0 0 0 1px rgb(var(--tw-prose-kbd-shadows) / 10%), 0 3px 0 rgb(var(--tw-prose-kbd-shadows) / 10%);
  padding-top: .1875em;
  padding-inline-end: .375em;
  padding-bottom: .1875em;
  border-radius: .3125rem;
  padding-inline-start: .375em;
  font-family: inherit;
  font-size: .875em;
  font-weight: 500;
}

.prose :where(code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-code);
  font-size: .875em;
  font-weight: 600;
}

.prose :where(code):not(:where([class~=not-prose],[class~=not-prose] *)):after,
.prose :where(code):not(:where([class~=not-prose],[class~=not-prose] *)):before {
  content: "`";
}

.prose :where(a code):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(h1 code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
}

.prose :where(h2 code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-size: .875em;
}

.prose :where(h3 code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
  font-size: .9em;
}

.prose :where(blockquote code):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(h4 code):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(thead th code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: inherit;
}

.prose :where(pre):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-pre-code);
  background-color: var(--tw-prose-pre-bg);
  padding-top: .857143em;
  padding-inline-end: 1.14286em;
  padding-bottom: .857143em;
  border-radius: .375rem;
  margin-top: 1.71429em;
  margin-bottom: 1.71429em;
  padding-inline-start: 1.14286em;
  font-size: .875em;
  font-weight: 400;
  line-height: 1.71429;
  overflow-x: auto;
}

.prose :where(pre code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  font-weight: inherit;
  color: inherit;
  font-size: inherit;
  font-family: inherit;
  line-height: inherit;
  background-color: #0000;
  border-width: 0;
  border-radius: 0;
  padding: 0;
}

.prose :where(pre code):not(:where([class~=not-prose],[class~=not-prose] *)):after,
.prose :where(pre code):not(:where([class~=not-prose],[class~=not-prose] *)):before {
  content: none;
}

.prose :where(table):not(:where([class~=not-prose],[class~=not-prose] *)) {
  table-layout: auto;
  width: 100%;
  margin-top: 2em;
  margin-bottom: 2em;
  font-size: .875em;
  line-height: 1.71429;
}

.prose :where(thead):not(:where([class~=not-prose],[class~=not-prose] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-th-borders);
}

.prose :where(thead th):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-headings);
  vertical-align: bottom;
  padding-inline-end: .571429em;
  padding-bottom: .571429em;
  padding-inline-start: .571429em;
  font-weight: 600;
}

.prose :where(tbody tr):not(:where([class~=not-prose],[class~=not-prose] *)) {
  border-bottom-width: 1px;
  border-bottom-color: var(--tw-prose-td-borders);
}

.prose :where(tbody tr:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  border-bottom-width: 0;
}

.prose :where(tbody td):not(:where([class~=not-prose],[class~=not-prose] *)) {
  vertical-align: baseline;
}

.prose :where(tfoot):not(:where([class~=not-prose],[class~=not-prose] *)) {
  border-top-width: 1px;
  border-top-color: var(--tw-prose-th-borders);
}

.prose :where(tfoot td):not(:where([class~=not-prose],[class~=not-prose] *)) {
  vertical-align: top;
}

.prose :where(th, td):not(:where([class~=not-prose],[class~=not-prose] *)) {
  text-align: start;
}

.prose :where(figure>*):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(figcaption):not(:where([class~=not-prose],[class~=not-prose] *)) {
  color: var(--tw-prose-captions);
  margin-top: .857143em;
  font-size: .875em;
  line-height: 1.42857;
}

.prose {
  --tw-prose-body: oklch(37.3% .034 259.733);
  --tw-prose-headings: oklch(21% .034 264.665);
  --tw-prose-lead: oklch(44.6% .03 256.802);
  --tw-prose-links: oklch(21% .034 264.665);
  --tw-prose-bold: oklch(21% .034 264.665);
  --tw-prose-counters: oklch(55.1% .027 264.364);
  --tw-prose-bullets: oklch(87.2% .01 258.338);
  --tw-prose-hr: oklch(92.8% .006 264.531);
  --tw-prose-quotes: oklch(21% .034 264.665);
  --tw-prose-quote-borders: oklch(92.8% .006 264.531);
  --tw-prose-captions: oklch(55.1% .027 264.364);
  --tw-prose-kbd: oklch(21% .034 264.665);
  --tw-prose-kbd-shadows: NaN NaN NaN;
  --tw-prose-code: oklch(21% .034 264.665);
  --tw-prose-pre-code: oklch(92.8% .006 264.531);
  --tw-prose-pre-bg: oklch(27.8% .033 256.848);
  --tw-prose-th-borders: oklch(87.2% .01 258.338);
  --tw-prose-td-borders: oklch(92.8% .006 264.531);
  --tw-prose-invert-body: oklch(87.2% .01 258.338);
  --tw-prose-invert-headings: #fff;
  --tw-prose-invert-lead: oklch(70.7% .022 261.325);
  --tw-prose-invert-links: #fff;
  --tw-prose-invert-bold: #fff;
  --tw-prose-invert-counters: oklch(70.7% .022 261.325);
  --tw-prose-invert-bullets: oklch(44.6% .03 256.802);
  --tw-prose-invert-hr: oklch(37.3% .034 259.733);
  --tw-prose-invert-quotes: oklch(96.7% .003 264.542);
  --tw-prose-invert-quote-borders: oklch(37.3% .034 259.733);
  --tw-prose-invert-captions: oklch(70.7% .022 261.325);
  --tw-prose-invert-kbd: #fff;
  --tw-prose-invert-kbd-shadows: 255 255 255;
  --tw-prose-invert-code: #fff;
  --tw-prose-invert-pre-code: oklch(87.2% .01 258.338);
  --tw-prose-invert-pre-bg: #00000080;
  --tw-prose-invert-th-borders: oklch(44.6% .03 256.802);
  --tw-prose-invert-td-borders: oklch(37.3% .034 259.733);
  font-size: 1rem;
  line-height: 1.75;
}

.prose :where(picture>img):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose :where(li):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .5em;
  margin-bottom: .5em;
}

.prose :where(ol>li):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(ul>li):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: .375em;
}

.prose :where(.prose>ul>li p):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .75em;
  margin-bottom: .75em;
}

.prose :where(.prose>ul>li>p:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose>ul>li>p:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 1.25em;
}

.prose :where(.prose>ol>li>p:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
}

.prose :where(.prose>ol>li>p:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 1.25em;
}

.prose :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .75em;
  margin-bottom: .75em;
}

.prose :where(dl):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.25em;
  margin-bottom: 1.25em;
}

.prose :where(dd):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .5em;
  padding-inline-start: 1.625em;
}

.prose :where(h2+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(h3+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(h4+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose :where(hr+*):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
}

.prose :where(thead th:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: 0;
}

.prose :where(thead th:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-end: 0;
}

.prose :where(tbody td, tfoot td):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-top: .571429em;
  padding-inline-end: .571429em;
  padding-bottom: .571429em;
  padding-inline-start: .571429em;
}

.prose :where(tbody td:first-child, tfoot td:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: 0;
}

.prose :where(tbody td:last-child, tfoot td:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-end: 0;
}

.prose :where(figure):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 2em;
  margin-bottom: 2em;
}

.prose :where(.prose>:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
}

.prose :where(.prose>:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 0;
}

.prose-sm {
  font-size: .875rem;
  line-height: 1.71429;
}

.prose-sm :where(p):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
  margin-bottom: 1.14286em;
}

.prose-sm :where([class~=lead]):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .888889em;
  margin-bottom: .888889em;
  font-size: 1.28571em;
  line-height: 1.55556;
}

.prose-sm :where(blockquote):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.33333em;
  margin-bottom: 1.33333em;
  padding-inline-start: 1.11111em;
}

.prose-sm :where(h1):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
  margin-bottom: .8em;
  font-size: 2.14286em;
  line-height: 1.2;
}

.prose-sm :where(h2):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.6em;
  margin-bottom: .8em;
  font-size: 1.42857em;
  line-height: 1.4;
}

.prose-sm :where(h3):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.55556em;
  margin-bottom: .444444em;
  font-size: 1.28571em;
  line-height: 1.55556;
}

.prose-sm :where(h4):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.42857em;
  margin-bottom: .571429em;
  line-height: 1.42857;
}

.prose-sm :where(img):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(picture):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.71429em;
  margin-bottom: 1.71429em;
}

.prose-sm :where(picture>img):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose-sm :where(video):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.71429em;
  margin-bottom: 1.71429em;
}

.prose-sm :where(kbd):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-top: .142857em;
  padding-inline-end: .357143em;
  padding-bottom: .142857em;
  border-radius: .3125rem;
  padding-inline-start: .357143em;
  font-size: .857143em;
}

.prose-sm :where(code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  font-size: .857143em;
}

.prose-sm :where(h2 code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  font-size: .9em;
}

.prose-sm :where(h3 code):not(:where([class~=not-prose],[class~=not-prose] *)) {
  font-size: .888889em;
}

.prose-sm :where(pre):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-top: .666667em;
  padding-inline-end: 1em;
  padding-bottom: .666667em;
  border-radius: .25rem;
  margin-top: 1.66667em;
  margin-bottom: 1.66667em;
  padding-inline-start: 1em;
  font-size: .857143em;
  line-height: 1.66667;
}

.prose-sm :where(ol):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(ul):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
  margin-bottom: 1.14286em;
  padding-inline-start: 1.57143em;
}

.prose-sm :where(li):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .285714em;
  margin-bottom: .285714em;
}

.prose-sm :where(ol>li):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(ul>li):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: .428571em;
}

.prose-sm :where(.prose-sm>ul>li p):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .571429em;
  margin-bottom: .571429em;
}

.prose-sm :where(.prose-sm>ul>li>p:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
}

.prose-sm :where(.prose-sm>ul>li>p:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 1.14286em;
}

.prose-sm :where(.prose-sm>ol>li>p:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
}

.prose-sm :where(.prose-sm>ol>li>p:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 1.14286em;
}

.prose-sm :where(ul ul, ul ol, ol ul, ol ol):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .571429em;
  margin-bottom: .571429em;
}

.prose-sm :where(dl):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
  margin-bottom: 1.14286em;
}

.prose-sm :where(dt):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.14286em;
}

.prose-sm :where(dd):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .285714em;
  padding-inline-start: 1.57143em;
}

.prose-sm :where(hr):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 2.85714em;
  margin-bottom: 2.85714em;
}

.prose-sm :where(h2+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(h3+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(h4+*):not(:where([class~=not-prose],[class~=not-prose] *)),
.prose-sm :where(hr+*):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
}

.prose-sm :where(table):not(:where([class~=not-prose],[class~=not-prose] *)) {
  font-size: .857143em;
  line-height: 1.5;
}

.prose-sm :where(thead th):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-end: 1em;
  padding-bottom: .666667em;
  padding-inline-start: 1em;
}

.prose-sm :where(thead th:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: 0;
}

.prose-sm :where(thead th:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-end: 0;
}

.prose-sm :where(tbody td, tfoot td):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-top: .666667em;
  padding-inline-end: 1em;
  padding-bottom: .666667em;
  padding-inline-start: 1em;
}

.prose-sm :where(tbody td:first-child, tfoot td:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-start: 0;
}

.prose-sm :where(tbody td:last-child, tfoot td:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  padding-inline-end: 0;
}

.prose-sm :where(figure):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 1.71429em;
  margin-bottom: 1.71429em;
}

.prose-sm :where(figure>*):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
  margin-bottom: 0;
}

.prose-sm :where(figcaption):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: .666667em;
  font-size: .857143em;
  line-height: 1.33333;
}

.prose-sm :where(.prose-sm>:first-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-top: 0;
}

.prose-sm :where(.prose-sm>:last-child):not(:where([class~=not-prose],[class~=not-prose] *)) {
  margin-bottom: 0;
}
